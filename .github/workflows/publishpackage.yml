name: publish to powershell gallery
on:
  push:
    branches: [master]
    paths:
      - "**.psd1"

  workflow_dispatch:

jobs:
  publishmodule:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate and publish module
        shell: pwsh
        run: |
          # Module path and name
          $ModulePath = ".\code365scripts.openai"
          $ModuleName = "code365scripts.openai"
          
          Write-Host "üöÄ Starting PowerShell module publishing: $ModuleName" -ForegroundColor Green
          
          # 1. Validate module manifest
          Write-Host "üìã Validating module manifest..." -ForegroundColor Yellow
          try {
              $manifest = Test-ModuleManifest -Path "$ModulePath\$ModuleName.psd1"
              Write-Host "‚úÖ Module manifest validation successful" -ForegroundColor Green
              Write-Host "   Module version: $($manifest.Version)" -ForegroundColor Cyan
              Write-Host "   Exported functions: $($manifest.ExportedFunctions.Keys -join ', ')" -ForegroundColor Cyan
          }
          catch {
              Write-Error "‚ùå Module manifest validation failed: $_"
              exit 1
          }
          
          # 2. Install required dependencies
          Write-Host "üì¶ Installing PowerShellGet and required modules..." -ForegroundColor Yellow
          if (-not (Get-Module -ListAvailable -Name PowerShellGet)) {
              Install-Module -Name PowerShellGet -Force -AllowClobber -Scope CurrentUser
          }
          
          # 3. Set PowerShell Gallery as trusted repository
          Write-Host "üîí Configuring PowerShell Gallery..." -ForegroundColor Yellow
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          
          # 4. Install required modules if specified in manifest
          $data = Import-PowerShellDataFile "$ModulePath\$ModuleName.psd1"
          if($data.RequiredModules) {
              Write-Host "üì¶ Installing required modules..." -ForegroundColor Yellow
              $data.RequiredModules | Foreach-Object {
                  Write-Host "   Installing: $($_.ModuleName) version $($_.ModuleVersion)" -ForegroundColor Cyan
                  Install-Module -Name $_.ModuleName -RequiredVersion $_.ModuleVersion -Scope CurrentUser -Force
              }
          }
          
          # 5. Check if module already exists and version comparison
          Write-Host "üîç Checking if module exists in PowerShell Gallery..." -ForegroundColor Yellow
          try {
              $existingModule = Find-Module -Name $ModuleName -ErrorAction Stop
              Write-Host "üì¶ Found existing module version: $($existingModule.Version)" -ForegroundColor Cyan
              
              if ($manifest.Version -le $existingModule.Version) {
                  Write-Error "‚ö†Ô∏è Current module version ($($manifest.Version)) is not higher than published version ($($existingModule.Version))"
                  exit 1
              }
          }
          catch {
              Write-Host "üì¶ This is a new module, proceeding with first-time publishing" -ForegroundColor Green
          }
          
          # 6. Clean up unnecessary files for publishing
          Write-Host "üßπ Cleaning up unnecessary files..." -ForegroundColor Yellow
          if (Test-Path ".git") { Remove-Item -Path ".git" -Recurse -Force }
          if (Test-Path ".github") { Remove-Item -Path ".github" -Recurse -Force }
          if (Test-Path ".vscode") { Remove-Item -Path ".vscode" -Recurse -Force }
          
          # 7. Publish module
          Write-Host "üöÄ Publishing module to PowerShell Gallery..." -ForegroundColor Yellow
          try {
              Publish-Module -Path $ModulePath -NuGetApiKey "${{ secrets.NUGETKEY }}" -Verbose
              Write-Host "üéâ Module published successfully!" -ForegroundColor Green
              Write-Host "üì¶ Module link: https://www.powershellgallery.com/packages/$ModuleName" -ForegroundColor Cyan
          }
          catch {
              Write-Error "‚ùå Module publishing failed: $_"
              exit 1
          }
          
          Write-Host "‚úÖ Publishing process completed!" -ForegroundColor Green
